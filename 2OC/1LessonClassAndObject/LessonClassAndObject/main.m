//  main.m

#import <Foundation/Foundation.h>
/*
 1.面向过程:以过程为核心,注重的是完成事件的详细步骤,一步一步如何实现,
 2.面向对象:以事物为核心,注重的是参与该事件的事物,以及事物所具备的功能,
   完成一个事件,只是这些相关事物的一个小的功能而已
   特点:封装, 继承, 多态
 3.类:类是具有相同特征和行为的事物的抽象,类是一个抽象的概念,不具体.
 4.对象:对象是类的实例,是类的具体体现,生活中看到的万事万物皆为对象.
 5.类相当于数据类型,与结构体相似
 6.对象的实例变量占空间, 类不占空间, 方法也不占空间
 7.OC 中的方法调用形式 --- 消息发送机制 [receiver message].
 //对消息发送机制的理解:
 //1.receiver 接收到消息 message
 //2.receiver 找到 message 方法,并执行
 
*/
 //命名规范:
 //1.类名, 文件名: 由多个英文字母组成,每个英文字母首字母大写,不要出现数字,更不要出现拼音
 //2.实例变量, 方法名:由多个英文单词组成,除第一个英文单词外,其余英文单词首字母均大写
 //3.一般情况下,一对 .h 和 .m 文件中只定义一个类

/*
 类包含两部分:接口部分,实现部分
 接口部分: @interface 和 @end 之间的内容
 实现部分: @implementation 和 @end之间的内容
 在一对 .h 和 .m 文件中一般只放一个类
*/


#import "Person.h"

int main(int argc, const char * argv[]) {
    //开辟空间
    Person *p = [Person alloc];//alloc 用 Person 调用, 是类方法
    //初始化
    p = [p init];//init 用 per 调用, 是一个对象方法
    //init 初始化把开辟的空间清零
    //上面两句代码可以直接写成：Person *p=[[Person alloc] init];
    //还可以写成：Person *p=[Person new];
    
    //公共成员变量调用
    p->_height = 1.82;
    p->_gender = @"男";
    NSLog(@"heigth = %f", p->_height); //自动换行
    NSLog(@"gender = %@", p->_gender);
    //对象都是指针
    NSLog(@"%lu", sizeof(p->_gender));//输出: 8
    /*
     这里需要注意几点：
     ObjC中所有的对象类型的变量都必须加上“*”,在ObjC中对象其实就是一个指针（例如之前看到的NSString也是如此，但是基本类型不用加”*”）；
     ObjC中使用[]进行方法调用，在ObjC中方法调用的本质就是给这个对象或类发送一个消息；
     在ObjC中类的实例化需要两个步骤：分配内存、初始化；
     类的初始化调用了父类的init方法，如果使用默认初始化方法进行初始化（没有参数），内存分配和初始化可以简写成[Person new]；
     公共成员的调用使用“->”操作符；
     */
    
    //方法调用
    [p setName:@"Lee"];
    
    //属性调用
    [p setAge:23];//等价于: p.age = 23;
    int age = [p age];//等价于: age = p.age;
    NSLog(@"age = %i", age);
    /*
     关于方法的调用在这里不着重介绍了，我们可以看到p.age的调用方式，是不是类似于C#、Java中属性的调用方式，这就是ObjC中的点语法。其实这种方式调用的本质还是调用对应的方法进行处理，这么做的目的只是为了开发人员书写方便而已（这就是语法糖的目的）。至于p.age是调用get方法还是调用set方法完全取决于当前操作是赋值操作还是读取操作。
     
     通过上面的程序我们可以看到如果要定义一个属性，首先需要在.h中声明其次还要在.m中实现，而定义属性的代码基本都是类似的，那么有没有简单的方法呢，其实在ObjC中可以通过声明@property，同时通过@synthesize自动生成getter、setter方法（在新版本中甚至甚至都不用通过@synthesize只声明就可以使用）。我们通过一段代码来说明这个问题
     */


    //重写description方法
    NSLog(@"%@", p);
    //注意上面NSLog中的格式符是%@，当使用%@输出一个对象时，ObjC会调用个对象的description返回对应的信息进行输出，默认情况下如果我们不重写description方法，输出内容是类名和地址，例如Person则输出“<Person: 0x100202310>”。
    
    
    return 0;
}
